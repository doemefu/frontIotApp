# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches:
      - "**"
  schedule:
    - cron: '00 04 * * 4'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@main

      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: '3.x'

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      - name: Split SARIF file if needed
        run: |
          python scripts/split_sarif.py results.sarif 20

      - name: Check if part1 SARIF file exists
        id: check-part1
        run: |
          if [ -e results_part1.sarif ]; then echo "FILE_PART1_EXISTS=true" >> $GITHUB_ENV; fi

      - name: Check if part2 SARIF file exists
        id: check-part2
        run: |
          if [ -e results_part2.sarif ]; then echo "FILE_PART2_EXISTS=true" >> $GITHUB_ENV; fi

      - name: Upload SARIF results file - Part 1
        if: env.FILE_PART1_EXISTS == 'true'
        uses: github/codeql-action/upload-sarif@v3.25.6
        with:
          sarif_file: results_part1.sarif
          category: part1

      - name: Upload SARIF results file - Part 2
        if: env.FILE_PART2_EXISTS == 'true'
        uses: github/codeql-action/upload-sarif@v3.25.6
        with:
          sarif_file: results_part2.sarif
          category: part2